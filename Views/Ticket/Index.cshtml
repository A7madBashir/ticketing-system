@{
    ViewData["Title"] = "Tickets Management";
}

@section Styles {
    <link rel="stylesheet" type="text/css" href="~/lib/metronic/plugins/custom/datatables/datatables.bundle.css">
    <style>
        .card {
            margin-bottom: 20px;
        }
        .ticket-title {
            max-width: 200px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        /* Status/Priority badges */
        .badge-status-open { background-color: #E1F0FF; color: #3699FF; }
        .badge-status-inprogress { background-color: #FFF4DE; color: #FFA800; }
        .badge-status-resolved { background-color: #C9F7F5; color: #1BC5BD; }
        .badge-priority-low { background-color: #E8FFF3; color: #50CD89; }
        .badge-priority-medium { background-color: #E1F0FF; color: #3699FF; }
        .badge-priority-high { background-color: #FFF4DE; color: #FFA800; }
        .badge-priority-critical { background-color: #FFE2E5; color: #F64E60; }
        /* Loading overlay */
        .modal-loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255,255,255,0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }
    </style>
}

<div class="card">
    <!-- Card Header -->
    <div class="card-header border-0 pt-6">
        <div class="card-title">
            <!-- Search -->
            <div class="d-flex align-items-center position-relative my-1">
                <span class="svg-icon svg-icon-1 position-absolute ms-6">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                        <rect opacity="0.5" x="17.0365" y="15.1223" width="8.15546" height="2" rx="1" transform="rotate(45 17.0365 15.1223)" fill="black"></rect>
                        <path d="M11 19C6.55556 19 3 15.4444 3 11C3 6.55556 6.55556 3 11 3C15.4444 3 19 6.55556 19 11C19 15.4444 15.4444 19 11 19ZM11 5C7.53333 5 5 7.53333 5 11C5 14.4667 7.53333 17 11 17C14.4667 17 17 14.4667 17 11C17 7.53333 14.4667 5 11 5Z" fill="black"></path>
                    </svg>
                </span>
                <input type="text" data-kt-table-filter="search" class="form-control form-control-solid w-250px ps-15" placeholder="Search Tickets" />
            </div>
        </div>
        <!-- Toolbar -->
        <div class="card-toolbar">
            <div class="d-flex justify-content-end" data-kt-ticket-table-toolbar="base">
                <!-- Filter -->
                <button type="button" class="btn btn-light-primary me-3" data-kt-menu-trigger="click" data-kt-menu-placement="bottom-end">
                    <span class="svg-icon svg-icon-2">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                            <path d="M19.0759 3H4.72777C3.95892 3 3.47768 3.83148 3.86067 4.49814L8.56967 12.6949C9.17923 13.7559 9.5 14.9582 9.5 16.1819V19.5072C9.5 20.2189 10.2223 20.7028 10.8805 20.432L13.8805 19.1977C14.2553 19.0435 14.5 18.6783 14.5 18.273V13.8372C14.5 12.8089 14.8171 11.8056 15.408 10.964L19.8943 4.57465C20.3596 3.912 19.8856 3 19.0759 3Z" fill="black"></path>
                        </svg>
                    </span>
                    Filter
                </button>
                <!-- Filter Menu -->
                <div class="menu menu-sub menu-sub-dropdown w-300px w-md-325px" data-kt-menu="true" id="kt-toolbar-filter">
                    <div class="px-7 py-5">
                        <div class="fs-4 text-dark fw-bolder">Filter Options</div>
                    </div>
                    <div class="separator border-gray-200"></div>
                    <div class="px-7 py-5">
                        <!-- Status -->
                        <div class="mb-10">
                            <label class="form-label fs-5 fw-bold mb-3">Status</label>
                            <select class="form-select form-select-solid" data-kt-ticket-table-filter="status">
                                <option value="">All</option>
                                <option value="Open">Open</option>
                                <option value="InProgress">In Progress</option>
                                <option value="Resolved">Resolved</option>
                            </select>
                        </div>
                        <!-- Priority -->
                        <div class="mb-10">
                            <label class="form-label fs-5 fw-bold mb-3">Priority</label>
                            <select class="form-select form-select-solid" data-kt-ticket-table-filter="priority">
                                <option value="">All</option>
                                <option value="Low">Low</option>
                                <option value="Medium">Medium</option>
                                <option value="High">High</option>
                                <option value="Critical">Critical</option>
                            </select>
                        </div>
                        <!-- Category -->
                        <div class="mb-10">
                            <label class="form-label fs-5 fw-bold mb-3">Category</label>
                            <select class="form-select form-select-solid fw-bolder" data-kt-select2="true" 
                                    data-placeholder="Select Category" data-allow-clear="true"
                                    data-kt-ticket-table-filter="category_id">
                                <option></option>
                                <!-- Dynamically loaded -->
                            </select>
                        </div>
                        <!-- Agency -->
                        <div class="mb-10">
                            <label class="form-label fs-5 fw-bold mb-3">Agency</label>
                            <select class="form-select form-select-solid fw-bolder" data-kt-select2="true" 
                                    data-placeholder="Select Agency" data-allow-clear="true"
                                    data-kt-ticket-table-filter="agency_id">
                                <option></option>
                                <!-- Dynamically loaded -->
                            </select>
                        </div>
                        <!-- Actions -->
                        <div class="d-flex justify-content-end">
                            <button type="reset" class="btn btn-light btn-active-light-primary me-2" 
                                    data-kt-menu-dismiss="true" data-kt-ticket-table-filter="reset">
                                Reset
                            </button>
                            <button type="submit" class="btn btn-primary" data-kt-menu-dismiss="true" 
                                    data-kt-ticket-table-filter="filter">
                                Apply
                            </button>
                        </div>
                    </div>
                </div>
                <!-- Add Ticket -->
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#kt_modal_add_ticket">
                    <i class="fas fa-plus me-2"></i>Add Ticket
                </button>
            </div>
        </div>
    </div>
    <!-- Card Body -->
    <div class="card-body pt-0">
        <div class="table-responsive">
            <table id="data-table" class="table table-row-bordered table-stripped align-middle fs-6 gs-7 gy-5" style="width:100%">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Status</th>
                        <th>Priority</th>
                        <th>Category</th>
                        <th>Agency</th>
                        <th>Created By</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>

<!-- Add Ticket Modal -->
<div class="modal fade" id="kt_modal_add_ticket" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="fw-bolder">Add New Ticket</h2>
                <div class="btn btn-icon btn-sm btn-active-icon-primary" data-bs-dismiss="modal" aria-label="Close modal">
                    <span class="svg-icon svg-icon-1">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                            <rect opacity="0.5" x="6" y="17.3137" width="16" height="2" rx="1" transform="rotate(-45 6 17.3137)" fill="black" />
                            <rect x="7.41422" y="6" width="16" height="2" rx="1" transform="rotate(45 7.41422 6)" fill="black" />
                        </svg>
                    </span>
                </div>
            </div>
            <div class="modal-body mx-5 mx-xl-15 my-7">
                <form id="kt_modal_add_ticket_form" method="post" class="form">
                    <input type="hidden" name="__RequestVerificationToken" value="@Html.AntiForgeryToken()" />
                    <div class="d-flex flex-column scroll-y me-n7 pe-7">
                        <!-- Title -->
                        <div class="row g-9 mb-7">
                            <div class="col-md-12 fv-row">
                                <label class="required fw-bold fs-6 mb-2">Title</label>
                                <input type="text" name="Title" class="form-control form-control-solid" 
                                       placeholder="e.g., Login Issue" maxlength="100" required />
                            </div>
                        </div>
                        <!-- Description -->
                        <div class="row g-9 mb-7">
                            <div class="col-md-12 fv-row">
                                <label class="fw-bold fs-6 mb-2">Description</label>
                                <textarea name="Description" class="form-control form-control-solid" 
                                          rows="4" maxlength="500" 
                                          placeholder="Detailed description of the issue"></textarea>
                            </div>
                        </div>
                        <!-- Status & Priority -->
                        <div class="row g-9 mb-7">
                            <div class="col-md-6 fv-row">
                                <label class="required fw-bold fs-6 mb-2">Status</label>
                                <select name="Status" class="form-select form-select-solid" required>
                                    <option value="Open" selected>Open</option>
                                    <option value="InProgress">In Progress</option>
                                    <option value="Resolved">Resolved</option>
                                </select>
                            </div>
                            <div class="col-md-6 fv-row">
                                <label class="required fw-bold fs-6 mb-2">Priority</label>
                                <select name="Priority" class="form-select form-select-solid" required>
                                    <option value="Low">Low</option>
                                    <option value="Medium" selected>Medium</option>
                                    <option value="High">High</option>
                                    <option value="Critical">Critical</option>
                                </select>
                            </div>
                        </div>
                        <!-- Category -->
                        <div class="row g-9 mb-7">
                            <div class="col-md-12 fv-row">
                                <label class="required fw-bold fs-6 mb-2">Category</label>
                                <select name="CategoryId" class="form-select form-select-solid fw-bolder" 
                                        data-kt-select2="true" data-placeholder="Select Category" required>
                                    <option></option>
                                    <!-- Dynamically loaded -->
                                </select>
                            </div>
                        </div>
                        <!-- Agency -->
                        <div class="row g-9 mb-7">
                            <div class="col-md-12 fv-row">
                                <label class="required fw-bold fs-6 mb-2">Agency</label>
                                <select name="AgencyId" class="form-select form-select-solid fw-bolder" 
                                        data-kt-select2="true" data-placeholder="Select Agency" required>
                                    <option></option>
                                    <!-- Dynamically loaded -->
                                </select>
                            </div>
                        </div>
                        <!-- Chatbot Origin -->
                        <div class="row g-9 mb-7">
                            <div class="col-md-12 fv-row">
                                <label class="form-check form-check-custom form-check-solid">
                                    <input class="form-check-input" type="checkbox" name="OriginatedFromChatbot" />
                                    <span class="form-check-label">Originated from Chatbot?</span>
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="text-center pt-15">
                        <button type="reset" class="btn btn-light me-3" data-bs-dismiss="modal">Discard</button>
                        <button type="submit" id="kt_add_ticket_submit_button" class="btn btn-primary">
                            <span class="indicator-label">Submit</span>
                            <span class="indicator-progress">Please wait...
                                <span class="spinner-border spinner-border-sm align-middle ms-2"></span>
                            </span>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Ticket Modal -->
<div class="modal fade" id="kt_modal_edit_ticket" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="fw-bolder">Edit Ticket</h2>
                <div class="btn btn-icon btn-sm btn-active-icon-primary" data-bs-dismiss="modal" aria-label="Close modal">
                    <span class="svg-icon svg-icon-1">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                            <rect opacity="0.5" x="6" y="17.3137" width="16" height="2" rx="1" transform="rotate(-45 6 17.3137)" fill="black" />
                            <rect x="7.41422" y="6" width="16" height="2" rx="1" transform="rotate(45 7.41422 6)" fill="black" />
                        </svg>
                    </span>
                </div>
            </div>
            <div class="modal-body scroll-y mx-5 mx-xl-15 my-7">
                <form id="kt_modal_edit_ticket_form" class="form">
                    <input type="hidden" name="__RequestVerificationToken" value="@Html.AntiForgeryToken()" />
                    <input type="hidden" name="Id" id="editTicketId" />
                    <div class="d-flex flex-column scroll-y me-n7 pe-7">
                        <!-- Title -->
                        <div class="row g-9 mb-7">
                            <div class="col-md-12 fv-row">
                                <label class="required fw-bold fs-6 mb-2">Title</label>
                                <input type="text" name="Title" class="form-control form-control-solid" maxlength="100" required />
                            </div>
                        </div>
                        <!-- Description -->
                        <div class="row g-9 mb-7">
                            <div class="col-md-12 fv-row">
                                <label class="fw-bold fs-6 mb-2">Description</label>
                                <textarea name="Description" class="form-control form-control-solid" rows="4" maxlength="500"></textarea>
                            </div>
                        </div>
                        <!-- Status & Priority -->
                        <div class="row g-9 mb-7">
                            <div class="col-md-6 fv-row">
                                <label class="required fw-bold fs-6 mb-2">Status</label>
                                <select name="Status" class="form-select form-select-solid" required>
                                    <option value="Open">Open</option>
                                    <option value="InProgress">In Progress</option>
                                    <option value="Resolved">Resolved</option>
                                </select>
                            </div>
                            <div class="col-md-6 fv-row">
                                <label class="required fw-bold fs-6 mb-2">Priority</label>
                                <select name="Priority" class="form-select form-select-solid" required>
                                    <option value="Low">Low</option>
                                    <option value="Medium">Medium</option>
                                    <option value="High">High</option>
                                    <option value="Critical">Critical</option>
                                </select>
                            </div>
                        </div>
                        <!-- Category -->
                        <div class="row g-9 mb-7">
                            <div class="col-md-12 fv-row">
                                <label class="fw-bold fs-6 mb-2">Category</label>
                                <input type="text" id="editTicketCategory" class="form-control form-control-solid" disabled />
                            </div>
                        </div>
                        <!-- Agency -->
                        <div class="row g-9 mb-7">
                            <div class="col-md-12 fv-row">
                                <label class="fw-bold fs-6 mb-2">Agency</label>
                                <input type="text" id="editTicketAgency" class="form-control form-control-solid" disabled />
                            </div>
                        </div>
                        <!-- Chatbot Origin -->
                        <div class="row g-9 mb-7">
                            <div class="col-md-12 fv-row">
                                <label class="form-check form-check-custom form-check-solid">
                                    <input class="form-check-input" type="checkbox" id="editTicketChatbot" disabled />
                                    <span class="form-check-label">Originated from Chatbot</span>
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="text-center pt-15">
                        <button type="reset" class="btn btn-light me-3" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" id="kt_edit_ticket_submit_button" class="btn btn-primary">
                            <span class="indicator-label">Save Changes</span>
                            <span class="indicator-progress">Please wait...
                                <span class="spinner-border spinner-border-sm align-middle ms-2"></span>
                            </span>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/metronic/plugins/custom/datatables/datatables.bundle.js"></script>
    <script src="~/js/dataTable/init.js"></script>
    <script src="~/js/forms/form-submit-handler.js"></script>
    <script src="~/js/forms/ajaxSelect2Handler.js"></script>
    <script>
        $(document).ready(function () {
            let dataTable;
            let currentUserId = '@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value';

            // Initialize DataTable
            function initializeTicketsDataTable() {
                dataTable = new DataTableSSR("/api/Ticket", [
                    { 
                        data: "title", 
                        name: "Title", // Keep PascalCase for server-side sorting/filtering if backend expects it
                        class: "ticket-title",
                        render: (data) => data?.length > 30 ? data.substring(0, 30) + "..." : data || "—"
                    },
                    { 
                        data: "status", 
                        name: "Status", // Keep PascalCase
                        render: (data) => {
                            let badgeClass = "badge-status-open";
                            if (data === "InProgress") badgeClass = "badge-status-inprogress";
                            if (data === "Resolved") badgeClass = "badge-status-resolved";
                            return data ? `<span class="badge ${badgeClass}">${data}</span>` : "—";
                        }
                    },
                    { 
                        data: "priority", 
                        name: "Priority", // Keep PascalCase
                        render: (data) => {
                            let badgeClass = "badge-priority-low";
                            if (data === "Medium") badgeClass = "badge-priority-medium";
                            if (data === "High") badgeClass = "badge-priority-high";
                            if (data === "Critical") badgeClass = "badge-priority-critical";
                            return data ? `<span class="badge ${badgeClass}">${data}</span>` : "—";
                        }
                    },
                    { 
                        data: "category", 
                        name: "Category", // Keep PascalCase
                        render: (data) => data?.name || "—"
                    },
                    { 
                        data: "agency", 
                        name: "Agency", // Keep PascalCase
                        render: (data) => data?.name || "—"
                    },
                    { 
                        data: "createdBy", 
                        name: "CreatedBy", // Keep PascalCase
                        render: (data) => data?.email || "—"
                    },
                    { 
                        data: null, 
                        class: "text-end",
                        orderable: false,
                        searchable: false,
                        render: (data) => `
                            <a href="#" class="btn btn-sm btn-light-primary me-2 px-4" 
                               data-kt-action="edit_row" data-id="${data.id}"
                               data-bs-toggle="modal" data-bs-target="#kt_modal_edit_ticket">
                                Edit
                            </a>
                            <a href="#" class="btn btn-sm btn-light-danger px-4" 
                               data-kt-action="delete_row" data-id="${data.id}">
                                Delete
                            </a>
                        `
                    }
                ]);

                // This line is redundant and should be removed if DataTableSSR already initializes #data-table
                // and handles draw events internally. If it's for attaching general DataTables events,
                // it can stay, but the action can be empty as delegated events handle row-specific logic.
                dataTable.initDataTableObj("#data-table", null, null, [{
                    event: "draw.dt",
                    action: () => {
                        // All row-specific events are handled by delegated listeners (e.g., $(document).on)
                        // No specific re-attachment needed here
                    }
                }]);
                
                // Custom search and filters
                dataTable.customSearchDataTable("[data-kt-table-filter='search']");
                dataTable.customizeDataTableQueryParams = () => ({
                    filters: {
                        status: $("[data-kt-ticket-table-filter='status']").val(),
                        priority: $("[data-kt-ticket-table-filter='priority']").val(),
                        categoryId: $("[data-kt-ticket-table-filter='category_id']").val(),
                        agencyId: $("[data-kt-ticket-table-filter='agency_id']").val()
                    }
                });
            }

            // --- Event Handling for Delete ---
            $(document).on('click', '[data-kt-action="delete_row"]', function(e) {
                e.preventDefault();
                const ticketId = $(this).data('id'); // Get ID from data-id attribute
                
                Swal.fire({
                    title: "Delete Ticket?",
                    text: "Are you sure you want to delete this ticket? This action cannot be undone.",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Yes, delete it!",
                    cancelButtonText: "Cancel",
                    reverseButtons: true
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: `/api/Ticket/${ticketId}`,
                            type: "DELETE",
                            headers: {
                                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                            },
                            success: () => {
                                dataTable.reDraw(); // Redraw the table after successful deletion
                                Swal.fire("Deleted!", "Ticket has been deleted successfully.", "success");
                            },
                            error: (xhr) => {
                                console.error("Delete Error:", xhr);
                                let errorMessage = "Failed to delete ticket.";
                                if (xhr.responseJSON && xhr.responseJSON.message) {
                                    errorMessage = xhr.responseJSON.message;
                                } else if (xhr.statusText) {
                                    errorMessage = xhr.statusText;
                                }
                                Swal.fire("Error", errorMessage, "error");
                            }
                        });
                    }
                });
            });

            // --- Event Handling for Edit ---
            $(document).on('click', '[data-kt-action="edit_row"]', async function(e) {
                e.preventDefault();
                const ticketId = $(this).data('id'); // Get ID from data-id attribute
                await fetchAndPopulateEditModal(ticketId);
                // The modal should automatically show due to data-bs-toggle="modal" on the button
                // If it doesn't, uncomment: $("#kt_modal_edit_ticket").modal("show");
            });

            // Fetch ticket data for edit modal
            async function fetchAndPopulateEditModal(ticketId) {
                const modal = $("#kt_modal_edit_ticket");
                modal.find(".modal-content").prepend('<div class="modal-loading-overlay"><div class="spinner-border text-primary"></div></div>');
                
                try {
                    const response = await fetch(`/api/Ticket/${ticketId}`);
                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({ message: response.statusText }));
                        throw new Error(`HTTP error! Status: ${response.status} - ${errorData.message || 'Unknown error'}`);
                    }
                    const ticket = await response.json(); // API returns camelCase properties

                    // Populate the form fields. Selectors now match PascalCase HTML name attributes.
                    // Values come from camelCase API response.
                    $("#editTicketId").val(ticket.id);
                    $("#kt_modal_edit_ticket_form input[name='Title']").val(ticket.title);
                    $("#kt_modal_edit_ticket_form textarea[name='Description']").val(ticket.description || "");
                    $("#kt_modal_edit_ticket_form select[name='Status']").val(ticket.status).trigger("change");
                    // Ensure your backend consistently returns 'priority' (not null) or handle default
                    $("#kt_modal_edit_ticket_form select[name='Priority']").val(ticket.priority || "Medium").trigger("change"); 
                    $("#editTicketCategory").val(ticket.category?.name || "—");
                    $("#editTicketAgency").val(ticket.agency?.name || "—");
                    $("#editTicketChatbot").prop("checked", ticket.originatedFromChatbot || false);

                } catch (error) {
                    console.error("Error loading ticket for edit:", error);
                    Swal.fire("Error", error.message || "Could not load ticket details. Please try again.", "error");
                } finally {
                    modal.find(".modal-loading-overlay").remove();
                }
            }

            // Initialize Select2 dropdowns for Add/Filter forms
            function initializeSelect2Dropdowns() {
                // Note: These selectors expect PascalCase 'name' attributes for Categories/Agencies dropdowns in the ADD form
                select2AjaxSearchHandleListener(
                    "#kt_modal_add_ticket_form select[name='CategoryId']",
                    { multiple: false },
                    "/api/Category",
                    (params) => ({ search: params.term }),
                    (data) => ({
                        results: data.data.map(c => ({ id: c.id, text: c.name })),
                        pagination: { more: false }
                    })
                );

                select2AjaxSearchHandleListener(
                    "#kt_modal_add_ticket_form select[name='AgencyId']",
                    { multiple: false },
                    "/api/Agency",
                    (params) => ({ search: params.term }),
                    (data) => ({
                        results: data.data.map(a => ({ id: a.id, text: a.name })),
                        pagination: { more: false }
                    })
                );

                // Filter Select2s (these already use data attributes, so no name attribute conflict)
                select2AjaxSearchHandleListener(
                    "[data-kt-ticket-table-filter='category_id']",
                    { multiple: false },
                    "/api/Category",
                    (params) => ({ search: params.term }),
                    (data) => ({
                        results: data.data.map(c => ({ id: c.id, text: c.name })),
                        pagination: { more: false }
                    })
                );

                select2AjaxSearchHandleListener(
                    "[data-kt-ticket-table-filter='agency_id']",
                    { multiple: false },
                    "/api/Agency",
                    (params) => ({ search: params.term }),
                    (data) => ({
                        results: data.data.map(a => ({ id: a.id, text: a.name })),
                        pagination: { more: false }
                    })
                );
            }

            // Form handlers (assuming FormSubmitHandler correctly processes PascalCase names from HTML)
            const addTicketFormHandler = new FormSubmitHandler({
                formSelector: "#kt_modal_add_ticket_form",
                submitButtonSelector: "#kt_add_ticket_submit_button",
                apiEndpoint: "/api/Ticket",
                method: "POST",
                validate: (formData) => {
                    // Accessing formData properties as PascalCase, expecting HTML input names to match
                    if (!formData.Title || formData.Title.length > 100) {
                        return { isValid: false, message: "Title is required and must be less than 100 characters" };
                    }
                    if (formData.Description && formData.Description.length > 500) {
                        return { isValid: false, message: "Description must be less than 500 characters" };
                    }
                    return { isValid: true };
                },
                onSuccess: () => {
                    Swal.fire("Success", "Ticket created successfully!", "success");
                    $("#kt_modal_add_ticket").modal("hide");
                    dataTable.reDraw(); // Redraw the table
                },
                onError: (error) => {
                    let message = "Failed to create ticket.";
                    if (error.response?.data?.errors) {
                        message = Object.values(error.response.data.errors).flat().join("\n"); // flat() for multiple errors per field
                    } else if (error.message) {
                        message = error.message;
                    }
                    Swal.fire("Error", message, "error");
                },
                beforeSubmit: (formData) => {
                    formData.CreatedById = currentUserId; // Expects HTML name="CreatedById" or FormSubmitHandler processes it.
                    return formData;
                }
            });

            const editTicketFormHandler = new FormSubmitHandler({
                formSelector: "#kt_modal_edit_ticket_form",
                submitButtonSelector: "#kt_edit_ticket_submit_button",
                apiEndpoint: "/api/Ticket", // Base endpoint, overridden by getFullEndpoint
                method: "PUT",
                getFullEndpoint: function(formData) {
                    const ticketId = $("#editTicketId").val(); // Get the hidden ID
                    if (!ticketId) {
                        throw new Error("No ticket ID found for editing. Cannot submit update.");
                    }
                    return `/api/Ticket/${ticketId}`;
                },
                validate: (formData) => {
                    // Accessing formData properties as PascalCase, expecting HTML input names to match
                    if (!formData.Title || formData.Title.length > 100) {
                        return { isValid: false, message: "Title is required and must be less than 100 characters" };
                    }
                    if (formData.Description && formData.Description.length > 500) {
                        return { isValid: false, message: "Description must be less than 500 characters" };
                    }
                    return { isValid: true };
                },
                onSuccess: () => {
                    Swal.fire("Success", "Ticket updated successfully!", "success");
                    $("#kt_modal_edit_ticket").modal("hide");
                    dataTable.reDraw(); // Redraw the table
                },
                onError: (error) => {
                    let message = "Failed to update ticket.";
                    if (error.response?.data?.errors) {
                        message = Object.values(error.response.data.errors).flat().join("\n"); // flat() for multiple errors per field
                    } else if (error.message) {
                        message = error.message;
                    }
                    Swal.fire("Error", message, "error");
                },
                beforeSubmit: (formData) => {
                    // The `id` is typically passed in the URL for PUT, but if your DTO also expects it in the body, include it.
                    // formData.Id = $("#editTicketId").val(); // Uncomment if your UpdateTicketRequest DTO also expects 'Id' in the body
                    return formData;
                }
            });

            // Filter button events
            $("[data-kt-ticket-table-filter='filter']").on("click", () => dataTable.reDraw());
            $("[data-kt-ticket-table-filter='reset']").on("click", () => {
                $("[data-kt-ticket-table-filter='status'], [data-kt-ticket-table-filter='priority']").val("").trigger("change"); // Add trigger("change") for selects
                $("[data-kt-ticket-table-filter='category_id'], [data-kt-ticket-table-filter='agency_id']").val("").trigger("change");
                dataTable.clearCustomFilters();
                dataTable.reDraw();
            });

            // Initialize everything when the document is ready
            initializeTicketsDataTable();
            initializeSelect2Dropdowns();
            // No need to explicitly call handleEditModalListener() here because event delegation
            // via $(document).on handles dynamically loaded elements.
        });
    </script>
}
